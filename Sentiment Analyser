{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "authorship_tag": "ABX9TyOn+At4cjNhtKFppbciXyd+",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/AryanChaks/Sentiment-Analyser/blob/main/Sentiment%20Analyser\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 2,
      "metadata": {
        "id": "ssh8XLB1Ld9L",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "3d53d5b3-e136-4674-8b84-ccef4e3efe01"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Enter a statement: I am honestly not feeling very satisfied with the product. It arrived initially in a bad condition and has been problematic with every use  \n",
            "The statement is: Negative\n"
          ]
        }
      ],
      "source": [
        "# Installing necessary libraries\n",
        "#!pip install transformers\n",
        "\n",
        "# Importing required modules\n",
        "import torch\n",
        "from transformers import BertTokenizer, BertForSequenceClassification\n",
        "from torch.nn.functional import softmax\n",
        "\n",
        "# Load pretrained BERT model and tokenizer\n",
        "PRE_TRAINED_MODEL_NAME = 'nlptown/bert-base-multilingual-uncased-sentiment'\n",
        "tokenizer = BertTokenizer.from_pretrained(PRE_TRAINED_MODEL_NAME)\n",
        "model = BertForSequenceClassification.from_pretrained(PRE_TRAINED_MODEL_NAME)\n",
        "model.eval()\n",
        "\n",
        "# Define function to predict sentiment\n",
        "def predict_sentiment(text):\n",
        "    # Tokenize text\n",
        "    inputs = tokenizer.encode_plus(\n",
        "        text,\n",
        "        add_special_tokens=True,\n",
        "        max_length=150,\n",
        "        return_token_type_ids=False,\n",
        "        padding='max_length',\n",
        "        return_attention_mask=True,\n",
        "        return_tensors='pt',\n",
        "    )\n",
        "\n",
        "    # Get predictions\n",
        "    with torch.no_grad():\n",
        "        outputs = model(**inputs)\n",
        "\n",
        "    # Calculate probabilities\n",
        "    probs = softmax(outputs.logits, dim=1)\n",
        "\n",
        "    # Extracting the prediction (5-point scale: very negative, negative, neutral, positive, very positive)\n",
        "    prediction = torch.argmax(probs, dim=1).item()\n",
        "\n",
        "    # Convert the 5-point scale to a simple positive/negative\n",
        "    if prediction <= 1:\n",
        "        return \"Negative\"\n",
        "    elif prediction == 2:\n",
        "        return \"Neutral\"\n",
        "    else:\n",
        "        return \"Positive\"\n",
        "\n",
        "# Take user input\n",
        "text = input(\"Enter a statement: \")\n",
        "print(f\"The statement is: {predict_sentiment(text)}\")\n"
      ]
    }
  ]
}